@model List<POCO.AccountTable>

@{
    ViewBag.Title = "Index";
}

<h2>AccountTable</h2>




@helper GetTreeView(List<POCO.AccountTable> accountingTree, Int64 parentID)
{
    foreach (var i in accountingTree.Where(a => a.ParentId.Equals(parentID)))
    {
        <li>
            @{var TreeBranche = accountingTree.Where(a => a.ParentId.Equals(i.AccountNo)).Count();}
            @if (TreeBranche > 0)
            {
                <span class="collapseTree  collapsible">&nbsp;</span>
            }
            else
            {
                <span style="width:15px; display:inline-block">&nbsp;</span>
            }
        <span>
            (@i.AccountNo)&nbsp;@i.AccountName&nbsp; &nbsp; &nbsp; &nbsp;
          
            <span>
                @Html.ActionLink("Create", "Create", new { parAccountNo = i.AccountNo }) |
                @Html.ActionLink("Edit", "Edit", new { parAccountNo = i.AccountNo }) |
                @Html.ActionLink("Details", "Details", new { parAccountNo = i.AccountNo }) |

                @Html.ActionLink("Delete", "Delete", new { parAccountNo = i.AccountNo }) |
            </span>
           
            
             

        </span>
            @if (TreeBranche > 0)
            {
                <ul>
                    @GetTreeView(accountingTree, i.AccountNo)
                    @* Recursive  Call for Populate Sub items here*@
                </ul>
            }
        </li>
    }
}
<div style="border:solid 1px black; padding:10px; background-color:#FAFAFA;">
    <div class="treeview">
        @if (Model.Count() <= 0)
        {
            @Html.ActionLink("Create", "CreateParent")
        }
        @if (Model != null && Model.Count() > 0)
        {
            <ul>
                @GetTreeView(Model, Model.FirstOrDefault().ParentId)
            </ul>
        }
        
       
    </div>
</div>






